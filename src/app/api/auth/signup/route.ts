import { findExistingUser, writeDatabase } from "@/helpers/dbHelpers";
import { generateUniqueId } from "@/helpers/dbHelpers";
import { User } from "@/types";
import { NextRequest, NextResponse } from "next/server";
import { genSalt, hashSync } from 'bcryptjs'
import { SignUpSchema } from "@/validations/signUpSchema/signUpSchema";
import { ZodError } from "zod";

export const POST = async (request: NextRequest) => {
    // POST request as we will be sending data to the server
    try {
        const requestbody = await request.json()
        // console.log(requestbody, "requestbody")
        // converting the incoming request into json format to deal with it and saving it in requestbody variable
        try {
            const validate = SignUpSchema.parse(requestbody) // validating the request according to our schema


        } catch (error) {
            if (error instanceof ZodError) {
                const errmsg = error.flatten().fieldErrors
                // console.log(errmsg)
                return NextResponse.json({ message: errmsg, status: 400 })
            }
        }



        if (!requestbody.name || !requestbody.email || !requestbody.password) {
            // checking if any of these proprties name, email and id are not present using OR operator
            return NextResponse.json({ // returning an error response
                message: "Name, email or password not provided",
                status: 400,
            });
        }

        const userExists = findExistingUser(requestbody)
        // dchecking that user xists or not using the findExistingUser function

        if (userExists) {
            return NextResponse.json({ message: "User already exists", status: 400 })
        }

        // console.log(requestbody)

        const salt = await genSalt(10)
        //In the context of bcrypt.js, the term "salt" refers to a random value that is combined with the password before hashing.
        const passwordHash = hashSync(requestbody.password, salt)
        // hash is generated by hashSync method . it takes the password to be hashed and the salt variable


        const newUser: User = { //creating a new user to be added to the database
            _id: generateUniqueId(),
            name: requestbody.name,
            email: requestbody.email,
            password: passwordHash
            // extracting name, password and email from the request body
        };
        writeDatabase(newUser); // calling the writedatabase function and providing the newUser to it.

        return NextResponse.json({ message: "Signup successful", status: 200 })
        // returning successful response 
    } catch (error: any) {
        console.error(error?.nessage, "error") // error handling
    }


};
